# Generated by Django 5.2 on 2025-04-25 23:35

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'area',
            },
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'route',
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'db_table': 'state',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('must_change_password', models.BooleanField(default=False)),
                ('failed_attempts', models.IntegerField(default=0)),
                ('is_locked', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('state', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='stratiview.state')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Rol',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stratiview.area')),
            ],
            options={
                'db_table': 'rol',
            },
        ),
        migrations.CreateModel(
            name='PanoramaMetadata',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=300)),
                ('url', models.CharField(max_length=400)),
                ('gps_lat', models.FloatField()),
                ('gps_lng', models.FloatField()),
                ('gps_alt', models.FloatField()),
                ('gps_direction', models.FloatField()),
                ('orientation', models.IntegerField()),
                ('camera_make', models.CharField(max_length=100)),
                ('camera_model', models.CharField(max_length=100)),
                ('software', models.CharField(max_length=100)),
                ('date_taken', models.DateTimeField()),
                ('date_uploaded', models.DateTimeField(auto_now_add=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('upload_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stratiview.route')),
            ],
            options={
                'db_table': 'panorama_metadata',
            },
        ),
        migrations.AddField(
            model_name='route',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stratiview.state'),
        ),
        migrations.CreateModel(
            name='UserArea',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stratiview.area')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_area',
            },
        ),
        migrations.CreateModel(
            name='UserRol',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('rol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stratiview.rol')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_rol',
            },
        ),
        migrations.AddConstraint(
            model_name='rol',
            constraint=models.UniqueConstraint(fields=('name', 'area'), name='unique_rol_fields'),
        ),
        migrations.AddConstraint(
            model_name='panoramametadata',
            constraint=models.UniqueConstraint(fields=('name', 'gps_lat', 'gps_lng', 'gps_alt', 'route'), name='unique_panorama_fields'),
        ),
        migrations.AddConstraint(
            model_name='userarea',
            constraint=models.UniqueConstraint(fields=('user', 'area'), name='unique_user_area_fields'),
        ),
        migrations.AddConstraint(
            model_name='userrol',
            constraint=models.UniqueConstraint(fields=('user', 'rol'), name='unique_user_rol_fields'),
        ),
    ]
